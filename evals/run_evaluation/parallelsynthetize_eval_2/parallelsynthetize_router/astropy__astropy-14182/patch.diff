```diff
--- a/astropy/io/ascii/rst.py
+++ b/astropy/io/ascii/rst.py
@@ -1,6 +1,7 @@
 # Licensed under a 3-clause BSD style license - see LICENSE.rst
 """An extensible ASCII table reader and writer.
 """
+
 import re
 
 from . import core, fixedwidth
@@ -65,6 +66,7 @@
         """
         names = kwargs.pop("names", ())
         include_names = kwargs.pop("include_names", ())
+        header_rows = kwargs.pop("header_rows", ["name"])
         exclude_names = kwargs.pop("exclude_names", ())
         tabletype = kwargs.pop("tabletype", "table")
         backend = kwargs.pop("backend", "ascii")
@@ -74,6 +76,7 @@
             self, delimiter_pad=" ", names=names, include_names=include_names,
             exclude_names=exclude_names, **kwargs
         )
+        self.header_rows = header_rows
         self.header = RSTHeader()
         self.header.splitter.delimiter = "="
         self.data = RSTData()
@@ -91,15 +94,22 @@
         # data strings to use for output.
         with capture_stdout() as fw_output:
             fixedwidth.FixedWidth.write(self, lines)
-        fw_output_lines = fw_output.getvalue().strip().split("\n")
-        # First line is the column headers
-        separator_line = re.sub(r".", "=", fw_output_lines[0].strip())
+        fw_output_lines = [x for x in fw_output.getvalue().split("\n") if x.strip()]
+        if not fw_output_lines:
+            return []
+
+        # Create separator line based on first line width, but replace
+        # non-whitespace with '='.
+        separator_line = re.sub(r"\S", "=", fw_output_lines[0]).strip()
+
+        n_header_lines = len(self.header_rows)
+
         lines.append(separator_line)
-        lines.append(fw_output_lines[0].strip())
+        for i in range(n_header_lines):
+            lines.append(fw_output_lines[i].strip())
         lines.append(separator_line)
-        lines.extend([line.strip() for line in fw_output_lines[1:]])
+        lines.extend([line.strip() for line in fw_output_lines[n_header_lines:]])
         lines.append(separator_line)
 
         if self.tabletype == "directive":

```