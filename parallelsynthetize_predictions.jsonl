{"instance_id": "astropy__astropy-12907", "model": "parallelsynthetize-router", "prediction": "diff --git a/astropy/modeling/separable.py b/astropy/modeling/separable.py\nindex e8a4c6a..f9b2d1e 100644\n--- a/astropy/modeling/separable.py\n+++ b/astropy/modeling/separable.py\n@@ -32,16 +32,12 @@\n     elif isinstance(model, CompoundModel):\n         matrix = np.zeros((model.n_outputs, model.n_inputs), dtype=bool)\n         if model.op == '&':\n-            # For models combined with &, the separability matrix is a block\n-            # diagonal matrix of the separability matrices of the components\n-            i = j = 0\n-            for sub_model in model:\n-                sub_matrix = separability_matrix(sub_model)\n-                matrix[i:i + sub_model.n_outputs,\n-                       j:j + sub_model.n_inputs] = sub_matrix\n-                i += sub_model.n_outputs\n-                j += sub_model.n_inputs\n+            # Recursively build the block diagonal matrix from the left and right\n+            # operands. This preserves the nested structure of compound models,\n+            # which is lost when iterating through a flattened model.\n+            left_matrix = separability_matrix(model.left)\n+            right_matrix = separability_matrix(model.right)\n+            matrix[:model.left.n_outputs, :model.left.n_inputs] = left_matrix\n+            matrix[model.left.n_outputs:, model.left.n_inputs:] = right_matrix\n         elif model.op == '|':\n             # For models combined with |, the separability matrix is the\n             # dot product of the separability matrices of the components\n\n```"}
{"instance_id": "astropy__astropy-14182", "model": "parallelsynthetize-router", "prediction": "diff --git a/file.py b/file.py\n--- a/file.py\n+++ b/file.py\n```diff\n--- a/astropy/io/ascii/rst.py\n+++ b/astropy/io/ascii/rst.py\n@@ -35,16 +35,25 @@\n     \"\"\"\n \n     def write(self, lines):\n-        if \"name\" not in self.header_rows:\n+        if not self.header_rows:\n             return\n-        lines.append(self.get_line(self.col_names, self.col_starts, self.col_ends))\n+\n+        for row in self.header_rows:\n+            if row == \"name\":\n+                vals = self.col_names\n+            elif row == \"unit\":\n+                vals = [str(col.unit) if col.unit is not None else \"\" for col in self.cols]\n+            else:\n+                raise ValueError(\n+                    f\"header_rows for rst format can only include 'name' or 'unit', not {row!r}\"\n+                )\n+            lines.append(self.get_line(vals, self.col_starts, self.col_ends))\n+\n         lines.append(\n             self.get_line(\n                 [self.underline] * len(self.col_names),\n                 self.col_starts,\n                 self.col_ends,\n             )\n         )\n \n \n@@ -57,9 +66,10 @@\n     data_class = SimpleRSTData\n     header_class = SimpleRSTHeader\n \n-    def __init__(self):\n+    def __init__(self, header_rows=None):\n         super().__init__(delimiter_pad=None, bookend=False)\n-\n+        if header_rows is not None:\n+            self.header.header_rows = header_rows\n \n     def write(self, lines):\n         lines = super().write(lines)\n\n```"}
{"instance_id": "astropy__astropy-14365", "model": "parallelsynthetize-router", "prediction": "diff --git a/astropy/io/ascii/qdp.py b/astropy/io/ascii/qdp.py\nindex 8b5a7c5f8..e8f3c4a2a 100644\n--- a/astropy/io/ascii/qdp.py\n+++ b/astropy/io/ascii/qdp.py\n@@ -66,11 +66,11 @@ def _line_type(line, delimiter=None):\n     _new_re = rf\"NO({sep}NO)+\"\n     _data_re = rf\"({_decimal_re}|NO|[-+]?nan)({sep}({_decimal_re}|NO|[-+]?nan))*)\"\n     _type_re = rf\"^\\s*((?P<command>{_command_re})|(?P<new>{_new_re})|(?P<data>{_data_re})?\\s*(\\!(?P<comment>.*))?\\s*$\"\n-    _line_type_re = re.compile(_type_re)\n+    _line_type_re = re.compile(_type_re, re.IGNORECASE)\n     line = line.strip()\n     if not line:\n         return \"comment\"\n-    match = _line_type_re.match(line)\n+    match = _line_type_re.match(line)\n \n     if match is None:\n         raise ValueError(f\"Unrecognized QDP line: {line}\")\n@@ -306,7 +306,7 @@ def _get_tables_from_qdp_file(qdp_file, input_colnames=None, delimiter=None):\n \n             values = []\n             for v in line.split(delimiter):\n-                if v == \"NO\":\n+                if v.upper() == \"NO\":\n                     values.append(np.ma.masked)\n                 else:\n                     # Understand if number is int or float\n\n```"}
{"instance_id": "astropy__astropy-14995", "model": "parallelsynthetize-router", "prediction": "diff --git a/astropy/nddata/mixins/ndarithmetic.py b/astropy/nddata/mixins/ndarithmetic.py\nindex 2a52119..a1b342c 100644\n--- a/astropy/nddata/mixins/ndarithmetic.py\n+++ b/astropy/nddata/mixins/ndarithmetic.py\n@@ -210,19 +210,16 @@ class NDArithmeticMixin:\n         # 1. Handle the mask\n         # The default behavior is to propagate the mask if only one of the\n         # operands has a mask, and do a bitwise or if both have masks.\n-        if handle_mask is None:\n-            # The default behavior is to take the mask of the other operand\n-            # if self has no mask, and do a bitwise_or if both have masks.\n-            if self.mask is None:\n-                new_mask = mask\n-            elif mask is None:\n-                new_mask = self.mask\n+        if self.mask is None:\n+            new_mask = mask\n+        elif mask is None:\n+            new_mask = self.mask\n+        else:\n+            # If both masks are present, they are combined. The default\n+            # combination is a bitwise OR.\n+            if handle_mask is None:\n+                new_mask = np.bitwise_or(self.mask, mask)\n             else:\n-                new_mask = np.bitwise_or(self.mask, mask)\n-        else:\n-            # If handle_mask is given, it is a function which takes\n-            # (mask1, mask2) and returns a new mask.\n-            new_mask = handle_mask(self.mask, mask)\n+                new_mask = handle_mask(self.mask, mask)\n \n         # 2. Handle the wcs\n         if compare_wcs is None:\n\n```"}
{"instance_id": "astropy__astropy-6938", "model": "parallelsynthetize-router", "prediction": "diff --git a/astropy/io/fits/fitsrec.py b/astropy/io/fits/fitsrec.py\nindex 1234567..abcdefg 100644\n--- a/astropy/io/fits/fitsrec.py\n+++ b/astropy/io/fits/fitsrec.py\n@@ -1234,7 +1234,7 @@ class FITS_rec(np.recarray):\n \n         # Replace exponent separator in floating point numbers\n         if 'D' in format:\n-            output_field.replace(encode_ascii('E'), encode_ascii('D'))\n+            output_field = output_field.replace(encode_ascii('E'), encode_ascii('D'))\n \n         # ASCII table, convert numbers to strings\n         if self._character_as_bytes:\n\n```"}
