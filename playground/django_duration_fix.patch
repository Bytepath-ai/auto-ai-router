diff --git a/django/db/models/fields/__init__.py b/django/db/models/fields/__init__.py
index 1234567..abcdefg 100644
--- a/django/db/models/fields/__init__.py
+++ b/django/db/models/fields/__init__.py
@@ -1624,7 +1624,7 @@ class DurationField(Field):
                 data,
                 params={
                     'bound': datetime.timedelta.max.total_seconds(),
-                    'value': human_readable_duration(data, "[DD] [HH:[MM:]]ss[.uuuuuu]"),
+                    'value': human_readable_duration(data, "[DD] [[HH:]MM:]ss[.uuuuuu]"),
                 },
                 code='overflow',
             )
@@ -1634,6 +1634,7 @@ class DurationField(Field):
 
     def formfield(self, **kwargs):
         defaults = {
+            'help_text': 'Expected format: [DD] [[HH:]MM:]ss[.uuuuuu]',
             'form_class': forms.DurationField,
         }
         defaults.update(kwargs)
diff --git a/django/forms/fields.py b/django/forms/fields.py
index 2345678..9abcdef 100644
--- a/django/forms/fields.py
+++ b/django/forms/fields.py
@@ -513,12 +513,15 @@ class DurationField(Field):
     }
     overflow_error = _('The number of days must be between {min_days} and {max_days}.')
 
+    def __init__(self, **kwargs):
+        kwargs.setdefault('help_text', 'Expected format: [DD] [[HH:]MM:]ss[.uuuuuu]')
+        super().__init__(**kwargs)
+
     def prepare_value(self, value):
         if isinstance(value, datetime.timedelta):
             return duration_string(value)
         return value
 
     def to_python(self, value):
         if value in self.empty_values:
             return None