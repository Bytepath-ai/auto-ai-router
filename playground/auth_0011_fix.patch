--- a/django/contrib/auth/migrations/0011_update_proxy_permissions.py
+++ b/django/contrib/auth/migrations/0011_update_proxy_permissions.py
@@ -23,12 +23,32 @@ def update_proxy_model_permissions(apps, schema_editor, reverse=False):
         concrete_content_type = ContentType.objects.get_for_model(Model, for_concrete_model=True)
         proxy_content_type = ContentType.objects.get_for_model(Model, for_concrete_model=False)
         old_content_type = proxy_content_type if reverse else concrete_content_type
         new_content_type = concrete_content_type if reverse else proxy_content_type
-        Permission.objects.filter(
+        
+        # Find permissions that need to be updated
+        permissions_to_update = Permission.objects.filter(
             permissions_query,
             content_type=old_content_type,
-        ).update(content_type=new_content_type)
+        )
+        
+        # Collect permissions that would conflict if updated
+        permissions_to_delete = []
+        for perm in permissions_to_update:
+            # Check if a permission with the same codename already exists for the new content_type
+            if Permission.objects.filter(
+                codename=perm.codename,
+                content_type=new_content_type,
+            ).exists():
+                permissions_to_delete.append(perm.pk)
+        
+        # Delete permissions that would cause conflicts (we're re-using the existing ones)
+        if permissions_to_delete:
+            Permission.objects.filter(pk__in=permissions_to_delete).delete()
+        
+        # Update remaining permissions
+        Permission.objects.filter(
+            permissions_query,
+            content_type=old_content_type,
+        ).update(content_type=new_content_type)
 
 
 def revert_proxy_model_permissions(apps, schema_editor):