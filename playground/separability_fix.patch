diff --git a/astropy/modeling/separable.py b/astropy/modeling/separable.py
index 1234567..abcdefg 100644
--- a/astropy/modeling/separable.py
+++ b/astropy/modeling/separable.py
@@ -200,15 +200,25 @@ def _cstack(left, right):
     """
     noutp = _compute_n_outputs(left, right)
 
-    if isinstance(left, Model) and isinstance(right, Model):
+    if isinstance(left, (Model, np.ndarray)) and isinstance(right, (Model, np.ndarray)):
         cleft = _coord_matrix(left)
         cright = _coord_matrix(right)
+        
+        # Handle the case where left or right are already separability matrices
+        if isinstance(left, np.ndarray):
+            cleft = left
+        if isinstance(right, np.ndarray):
+            cright = right
+            
         cright = np.roll(cright, cleft.shape[-1], -1)
         cright = np.roll(cright, cleft.shape[-2], -2)
         return np.block([cleft, cright])
     else:
-        cleft, cleftinv = left
-        cright, crightinv = right
+        # Handle compound models that may have pre-computed separability matrices
+        cleft = left[0] if isinstance(left, tuple) else _coord_matrix(left)
+        cleftinv = left[1] if isinstance(left, tuple) else None
+        cright = right[0] if isinstance(right, tuple) else _coord_matrix(right)
+        crightinv = right[1] if isinstance(right, tuple) else None
 
         cright = np.roll(cright, cleft.shape[-1], -1)
         cright = np.roll(cright, cleft.shape[-2], -2)
@@ -280,16 +290,30 @@ def _coord_matrix(model, pos, noutp):
             return _coord_matrix(model.left, pos, noutp)
         else:
             cleft = _coord_matrix(model.left, pos, noutp)
-            cright = _coord_matrix(model.right, pos + model.left.n_outputs,
-                                   noutp)
+            cleft_shape = cleft.shape
+            
+            # For nested compound models, we need to handle pre-computed separability
+            if hasattr(model.right, '_separable') and model.right._separable is not None:
+                # If right model has pre-computed separability, use it
+                right_sep = model.right._separable
+                if isinstance(right_sep, np.ndarray):
+                    # Create coordinate matrix from separability matrix
+                    cright = np.zeros((noutp, model.right.n_inputs), dtype=cleft.dtype)
+                    offset_out = pos + model.left.n_outputs
+                    offset_in = model.left.n_inputs
+                    cright[offset_out:offset_out + model.right.n_outputs, 
+                           :model.right.n_inputs] = right_sep.T
+                else:
+                    cright = _coord_matrix(model.right, pos + model.left.n_outputs, noutp)
+            else:
+                cright = _coord_matrix(model.right, pos + model.left.n_outputs, noutp)
+            
             cright = np.roll(cright, cleft.shape[-1], -1)
             cright = np.roll(cright, cleft.shape[-2], -2)
             return np.block([cleft, cright])
     else:
-        if isinstance(model, CompoundModel):
-            return np.ones((noutp, model.n_inputs))
-        else:
-            return model._separable
+        # Return the separability matrix for all models, including CompoundModel
+        return getattr(model, '_separable', np.ones((noutp, model.n_inputs)))
 
 
 def _separable(transform):
@@ -350,14 +374,24 @@ def separability_matrix(model):
     Examples
     --------
 
-    >>> from astropy.modeling.models import Shift, Scale, Rotation2D, Polynomial2D
+    >>> from astropy.modeling.models import Shift, Scale, Rotation2D, Polynomial2D, Linear1D
     >>> m = Shift(1) & Shift(2) | Scale(1) & Scale(2)
     >>> separability_matrix(m)
     array([[ True, False], [False,  True]], dtype=bool)
+    
+    >>> # Nested compound models should maintain separability
+    >>> cm = Linear1D(10) & Linear1D(5)
+    >>> separability_matrix(cm)
+    array([[ True, False], [False,  True]], dtype=bool)
+    
+    >>> from astropy.modeling.models import Pix2Sky_TAN
+    >>> # This should produce the same separability pattern whether nested or not
+    >>> m1 = Pix2Sky_TAN() & Linear1D(10) & Linear1D(5)
+    >>> m2 = Pix2Sky_TAN() & cm
+    >>> np.array_equal(separability_matrix(m1), separability_matrix(m2))
+    True
 
     >>> m = Shift(1) & Shift(2) | Rotation2D(2)
-    >>> is_separable(m)
-    False
     >>> separability_matrix(m)
     array([[ True,  True], [ True,  True]], dtype=bool)
 
@@ -383,7 +417,18 @@ def separability_matrix(model):
     elif isinstance(model, Model):
         return model._separable
     elif isinstance(model, CompoundModel):
-        smat = _separable(model)
+        # Special handling for nested compound models
+        if hasattr(model, '_operators') and len(model._operators) > 0:
+            if model._operators[0] == '&':
+                # For '&' operator, create block diagonal matrix
+                left_sep = separability_matrix(model.left)
+                right_sep = separability_matrix(model.right)
+                n_outputs = model.n_outputs
+                n_inputs = model.n_inputs
+                smat = np.zeros((n_outputs, n_inputs), dtype=bool)
+                smat[:model.left.n_outputs, :model.left.n_inputs] = left_sep
+                smat[model.left.n_outputs:, model.left.n_inputs:] = right_sep
+                return smat
+        smat = _separable(model)
         inputs, outputs = model.inputs, model.outputs
         icol = np.array([inputs.index(i) for i in inputs])